{"version":3,"sources":["firebase.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","textAlign","color","text","secondary","Todo","props","classes","useState","open","setOpen","input","setInput","Modal","onClose","e","className","placeholder","todo","value","onChange","event","target","Button","onClick","collection","doc","id","set","merge","Grid","container","item","xs","List","ListItem","ListItemText","primary","type","delete","App","todos","setTodos","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","Container","TextField","label","variant","disabled","preventDefault","add","timestamp","FieldValue","serverTimestamp","size","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c274cc6e.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyDJHIqoaCeOmNSqbpKBC6e_A7S6TPQO0ZM\",\r\n    authDomain: \"react-solvepanda.firebaseapp.com\",\r\n    databaseURL: \"https://react-solvepanda.firebaseio.com\",\r\n    projectId: \"react-solvepanda\",\r\n    storageBucket: \"react-solvepanda.appspot.com\",\r\n    messagingSenderId: \"49510090845\",\r\n    appId: \"1:49510090845:web:a75f5e080fe3df5e5ce5b4\",\r\n    measurementId: \"G-4WZRJ0WEC0\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nexport default db;","import React, { useState } from 'react'\r\nimport { List, ListItem, ListItemText, makeStyles, Button, Grid } from '@material-ui/core'\r\nimport db from './firebase';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Modal from '@material-ui/core/Modal';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      position: 'absolute',\r\n      width: 400,\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '2px solid #000',\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n      textAlign: 'center',\r\n      color: theme.palette.text.secondary,\r\n    },\r\n  }));\r\n\r\nfunction Todo(props) {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n    const [input, setInput] = useState('');\r\n   \r\n\r\n    const updateTodo = () =>{\r\n        //update todo with new input\r\n        db.collection('todos').doc(props.todo.id).set({\r\n            todo: input\r\n        },{merge: true})\r\n\r\n        setOpen(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Modal\r\n            open={open}\r\n            onClose={e => setOpen(false)}\r\n            >\r\n            <div className={classes.paper}>\r\n                <h1>Edit Todo</h1>\r\n                <input placeholder={props.todo.todo} value={input} onChange={ event => setInput(event.target.value)}/>\r\n                <Button onClick={updateTodo}>Update Todo</Button>\r\n            </div>\r\n            {/* {body} */}\r\n        </Modal>\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={8}>\r\n            <List>\r\n            <ListItem>\r\n                <ListItemText primary={props.todo.todo} secondary=\"Dummy deadline!\"></ListItemText>\r\n            </ListItem>\r\n            </List>\r\n            </Grid>\r\n            <Grid item xs={2}>  \r\n                <EditIcon type=\"button\" onClick={e => setOpen(true)}></EditIcon>\r\n            </Grid>\r\n            <Grid item xs={2}>  \r\n                <DeleteForeverIcon onClick={event => db.collection('todos').doc(props.todo.id).delete()}></DeleteForeverIcon>\r\n            </Grid>\r\n        </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React from 'react';\nimport {Container, TextField, Button} from '@material-ui/core';\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport Todo from './Todo';\nimport db from './firebase';\nimport firebase from 'firebase';\n\nfunction App() {\n    const [todos, setTodos] = useState(['abc', 'xyz']);\n    const [input, setInput] = useState('');\n\n    // this function working when app component loaded\n    useEffect(() => {\n      //this code fire when app.js load\n      db.collection('todos').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n        setTodos(snapshot.docs.map(doc => ({id: doc.id, todo: doc.data().todo})))\n      }) \n    }, []);\n\nconst addTodo = (event) =>{\n  event.preventDefault();\n\n  db.collection('todos').add({\n    todo: input,\n    timestamp: firebase.firestore.FieldValue.serverTimestamp()\n  })\n  setInput('');\n} \n\n\n  return (\n    <div className=\"App\">\n      <Container className=\"appContainer\">\n        <h1>Todo listing apps</h1>\n          <form>\n            <TextField  label=\"Write down your Todo\" variant=\"filled\" value={input} onChange={event => setInput(event.target.value)}></TextField>\n            <Button disabled={!input} type=\"submit\" onClick={addTodo} variant=\"contained\" color=\"primary\" size=\"large\">Add</Button>\n          </form>\n        <ul>\n        {todos.map(todo =>(\n          <Todo todo={todo}/>\n        ))}  \n        </ul>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}